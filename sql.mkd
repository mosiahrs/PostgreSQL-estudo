# PostgreSQL

É um SGBD-OR (sistema gerenciador de banco de dados Objeto Relacional), é openSource.

- Linguagem procedural 
Em varias linguagens como JAVA.

- Pouca manutenção.

Ele é comparável ao BD ORACLE ou SQL SERVER da Mycrosoft.

Documentação:
https://www.postgresql.org/docs/

# 

### SUMARY
<ul>
	<li> <a href="https://github.com/mosiahrs/PostgreSQL-estudo/edit/main/sql.mkd#sql---strutcture-query-language" > SQL - SIGLAS </a> </li>
	<li> <a href="https://github.com/mosiahrs/PostgreSQL-estudo/edit/main/sql.mkd#usando-select---04-a-06" > SELECT </a> </li>
	<li> <a href="https://github.com/mosiahrs/PostgreSQL-estudo/edit/main/sql.mkd#concatena%C3%A7%C3%A3o---concat" > CONCAT </a> </li>
	<li> <a href="https://github.com/mosiahrs/PostgreSQL-estudo/edit/main/sql.mkd#estruturas-condicionais---case-when" > CASE WHEN </a> </li>	
	<li> <a href="https://github.com/mosiahrs/PostgreSQL-estudo/edit/main/sql.mkd#coalesce" > COALESCE </a> </li>
	<li> <a href="https://github.com/mosiahrs/PostgreSQL-estudo/edit/main/sql.mkd#union-x-union-all" > UNION X UNIOM ALL </a> </li>
	<li> <a href="https://github.com/mosiahrs/PostgreSQL-estudo/edit/main/sql.mkd#like"> LIKE </a> </li>
</ul>


<div align="center">

##	`SQL - Strutcture Query Language`
</div>

- **DML** - Linguagem de manipulação de dados:
  *INSERT*, *UPDATE* e *DELETE*
- **DDL** - Linguagem de Definição de Dados
   *CREATE* e *DROP*
 - **DCL** - Linguagem de controle de Dados
   *GRANT* - autoriza ao usuário executar comandos
   *REVOKE* - remove ou restringe a capacidade de um usuário executar comandos.
 - **DTL** - Liguagem de transação de dados
    *BEGIN WORK* (ou *BEGIN TRANSACTION*) - COMMIT - ROLLBACK
  - **DQL** - Linguagem de Consulta de Dados
     *SELECT* - é o principal comando SQL.
     
     
<div align="center">

![image](https://user-images.githubusercontent.com/100864562/218334672-fe74b6c4-5c6a-4c40-b49b-df01c69652f8.png)

</div>


**Case-sensitive**  - Na distinção dos caracteres dos dados da tupla, já em relação à sintaxe não é...

##  Usando SELECT - 04 a 06

    
	--  Selecionando colunas pelo nome:
	
    SELECT nome_coluna1,nome_coluna2 FROM nome_tabela;

	-- Selecionando todas as colunas:
	
    SELECT * FROM TABELA1;
    
    -- Selecionando de maneira mais específica:
    
    SELECT nome_coluna FROM tabela 
    WHERE condicional OR outra_condicional


**IS NOT NULL** - pode ser usado para fazer verificações para valores não nulos (ou nulos).

**()** - Usar os parenteses para dividir os blocos de condição durante a busca, tabela verdade e etc...

**nome_coluna AS apelido** - usando o *AS* podemos criar um apelido para a coluna durante a busca, e será apresentado o resultado com esse valor no "titulo" da coluna.

> Esse valor, não é registrado na memória durante o filtro WHERE, para que seja possível deve-se adicionar essa consulta dentro de um bloco e fazer o filtro a partir desse bloco.

Problema:

    SELECT salario AS ganhos, comissao AS bonus 
    FROM func WHERE ganhos < 5000;
    
    ERROR: 1054 : Unknown column 'ganhos' in 'where clause'

Solução: 

    SELECT * FROM
    (SELECT salario AS ganhos, comissao AS bonus
    FROM func) X WHERE ganhos < 5000;
    
<div align="center">
<img width="500px" src="https://user-images.githubusercontent.com/100864562/218344280-3b4eaa2e-43bb-4ef6-9eff-09af463f0266.png" /></div>

#### Concatenação - CONCAT

    SELECT CONCAT(nome, ' STRING ', cargo) AS msg
    FROM fun WHERE deptnum = 10;

	Saida:		        +---------------------------+
				| msg	                    |
				+---------------------------+
				| Fulano String Gerente     |
				| Beltrano String CEO       |
				| Ciclano String CTO        |
				+---------------------------+

> No Postgres pode ser utilizado double pipe || para fazer a concatenção;

##  `Estruturas Condicionais - CASE WHEN`

Estrutura de seleção IF ELSE, ex


    CASE
        WHEN _`boolean-expression`_ THEN
          _`statements`_
      [ WHEN _`boolean-expression`_ THEN
          _`statements`_
        ... ]
      [ ELSE
          _`statements`_ ]
    END CASE;

Exemplo:

    SELECT nome,salario 
	    CASE 
		    WHEN salario <= 2000 THEN 'baixo'
		    WHEN salario >= 4000 then 'alto'
			ELSE 'medio'
		END as resultado 
	FROM func;
	
			+-------+----------+-------------+
			| nome  | salario  |  resultado  |
			+-------+----------+-------------+
			| Jose  |    1500  |  	baixo	 |
			| Joao  |    5000  |	alto     |
			| Maria |    3000  |	medio    | 
			+-------+----------+-------------+

## `COALESCE`
A `COALESCE`função retorna o primeiro de seus argumentos que não é nulo. Nulo é retornado apenas se todos os argumentos forem nulos. Geralmente é usado para substituir um valor padrão por valores nulos quando os dados são recuperados para exibição.

		SELECT coalesce(comissao, 0) FROM func;
> A Coluna comissão será exibida, com todos os valores NULL substituídos por zero, que foi o argumento passado após a virgula.

 ## **`Union x Union All`**
Duas formas de unir consultas, devendo trazer a mesma quantidade de colunas.

**Funcionalidade:** o union elimina os valores duplicados enquanto o union all não altera o result set.

**Performance:** Em questão de performance o union all consome menos recurso computacional, mesmo o union trazendo menos dados. O processo de remoção de valores duplicados torna o union menos performático, sendo nesse caso necessário avaliar a situação específica para utilizar cada um deles.
#
**Not in:** Utilizado para verificar o que contem em uma tabela que não contem na outra.  

**Distinct:** Tudo o que é único nas colunas referidas no SELECT.


Combinando os dois:

		SELECT DISTINCT DPTNUM FROM AREA 
		WHERE DEPTNUM not in (SELECT DPTNUM FROM FUN);

> Dessa forma a consulta retorna os valores únicos e que não se repetem em nas tabelas.

#### Operadores:

<img width="500px" src="https://user-images.githubusercontent.com/100864562/218342889-f45d1169-4715-4ea2-9e24-c111c4b8dbe4.png" />


## **`LIKE`** 
Serve para localizar(filtrar) padrões dentro de uma busca, utilizando % ou _ para referênciar o valor, por exemplo:
	
	SELECT nome FROM cliente
	WHERE upper(nome) LIKE 'JOSE%'
	
> Nesse caso retorna qualquer valor que inicie com Jose e a partir disso, pode ser qualquer caracter ou string. O comando upper torna obrigatório o valor em Uppercase pra filtrar a busca.


<div align="center">

![image](https://user-images.githubusercontent.com/100864562/218344691-dcb7675c-3571-4c8b-8bcb-641e8d850cf5.png)

</div>

#

**`TRABALHANDO COM STRING`**
Utilização do comando substr e utilizando sub consultas no from  da consulta, produto cartesiano.

*não é algo muito utilizado, porém é um recurso a ser explorado*
<br>

		SELECT substr (e.NOME,iter.POSICAO,1) AS C
		FROM (SELECT NOME FRM FUN NOME = 'JAIMES')e, 
		(SELECT id as POSICAO FROM TABELA10) iter WHERE iter.POSICAO <= length(e.NOME);
		
		+--------+
		|    C   |
		+--------+
		|    J   |
		|    A   |
		|    I   |
		|    M   |
		|    E   |
		|    S   |
		+--------+
> Na tabela acima é criado uma tabela "virtual" com uma coluna chamada C, que está exibindo um caracter do que está iterando a exibição de cada POSICAO conforme a quantidade de caracteres do NOME, no caso 6 (JAIMES).

![Por baixo dos panos ele vai pegar o item da posicao, comparar com o index do nome e substituir o produto cartesiano ](https://user-images.githubusercontent.com/100864562/219980776-7c93644c-7319-4cc4-85a1-9aedb530d37e.png)

**Length**: utilizado para contar o comprimento, tamanho da string apontando suas posições através de index.

**Replace**: Substtui caractere por outro.
		
		replace(COLUNA, 'x', 'y')

**GROUP_CONCAT()**
É uma função SQL que retorna uma String concatenando valores não nullos de um grupo.

	-> SELECT pub_id,GROUP_CONCAT(DISTINCT cate_id)
    -> FROM book_mast
    -> GROUP BY pub_id;
		+--------+--------------------------------+
		| pub_id | GROUP_CONCAT(DISTINCT cate_id) |
		+--------+--------------------------------+
		| P001   | CA002,CA004                    | 
		| P002   | CA003                          | 
		| P003   | CA001,CA003                    | 
		| P004   | CA005,CA002                    | 
		| P005   | CA001,CA004                    | 
		| P006   | CA005,CA001                    | 
		| P007   | CA005,CA002                    | 
		| P008   | CA005,CA004                    | 
		+--------+--------------------------------+

<br>

**TRABALHANDO COM NÚMEROS**

- Média -> AVG('coluna')
		
		SELECT avg(SALARIO) as media_salarial FROM FUN

- Valor máximo ou minimo, para retornar o maior valor e o menor valor respectivamente.

		max('coluna') , min('coluna')
	> elas ignoram os valores nulos

- Somar valores da coluna. 

		sum('coluna')

- Contar o numero de linhas em uma tabela/coluna.

		count(*)
	> Conta cada linha da tabela, independente da coluna, linhas NULL não são consideradas.






<p align="right">
<a href="https://github.com/mosiahrs/PostgreSQL-estudo/edit/main/sql.mkd#postgresql"> <img src="https://png.pngitem.com/pimgs/s/11-115907_transparent-oh-the-places-you-ll-go-balloon.png" width="80px" /> </a> <br> <strong>RETURN TO TOP</strong> </p>
